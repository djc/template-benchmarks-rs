#!/usr/bin/env just --justfile


# Runs Cargo Bench
bench:
	cargo bench

# Logs Benchmark Data
log:
	cargo bench | grep time > bench-data.log
	sed -i 's/Big\ table/Big-Table/g' bench-data.log
	sed -i 's/\ us/us/g' bench-data.log
	sed -i 's/\ ms/ms/g' bench-data.log
	sed -i 's/\ ns/ns/g' bench-data.log

# Exports Benchmark Data to File "filename"
export FILE:
	cargo bench | grep time >  {{FILE}}

# Copy Criterion Benchmarks SVGs
svg:
	cp target/criterion/Big\ table/report/violin.svg big-table.svg
	cp target/criterion/Teams/report/violin.svg teams.svg

# Runs Benchmarks & Updates README
update: log svg readme

# Sort Big Table Performance
bigtable:
	awk -f convert.awk bench-data.log | grep Big-Table | cut -d '/' -f2 | sed 's/us/\ us/g' | sed 's/ms/\ ms/g' | sed 's/ns/\ ns/g' | sort -nk5

# Sort Team Performance
teams:
	awk -f convert.awk bench-data.log | grep Teams | cut -d '/' -f2 | sed 's/us/\ us/g' | sed 's/ms/\ ms/g' | sed 's/ns/\ ns/g' | sort -nk5

# Updates Readme
readme:
	#!/usr/bin/env sh
	echo '# Templates' > README.md
	echo '' >> README.md
	echo '- [fmt][fmt]: Formats the value using the given formatter.' >> README.md
	echo '- [fomat][fomat]: alternative syntax for print/write/format-like macros with a small templating language' >> README.md
	echo '- [handlebars][handlebars]: Rust templating with Handlebars templating language.' >> README.md
	echo '- [horrorshow][horrorshow]: a templating library written in rust macros' >> README.md
	echo '- [markup][markup]: A blazing fast, type-safe template engine for Rust.' >> README.md
	echo '- [maud][maud]: Compile-time HTML templates for Rust' >> README.md
	echo '- [write!][write]: the std library `write!` macro' >> README.md
	echo '' >> README.md
	cat >> README.md << EOL

	[fmt]: https://doc.rust-lang.org/std/fmt/trait.Display.html#tymethod.fmt
	[fomat]: https://github.com/krdln/fomat-macros
	[handlebars]: https://github.com/sunng87/handlebars-rust
	[horrorshow]: https://github.com/Stebalien/horrorshow-rs
	[markup]: https://github.com/utkarshkukreti/markup.rs
	[maud]: https://github.com/lfairy/maud
	[write]: https://doc.rust-lang.org/std/macro.write.html

	## Results

	As a [violin plot] generated by [Criterion]:

	![Big table violin plot](big-table.svg)
	![Teams violin plot](teams.svg)

	[violin plot]: https://en.wikipedia.org/wiki/Violin_plot
	[criterion]: https://github.com/bheisler/criterion.rs

	Numbers, as output by Criterion:

	EOL
	echo '```java' >> README.md
	echo 'Big Table' >> README.md
	awk -f convert.awk bench-data.log | grep Big-Table | cut -d '/' -f2 | sort -nk5 | awk '{printf "%-24s%s %s %s \n", $1, $2, $3, $4 }'| sed 's/us/\ us/g' | sed 's/ms/\ ms/g' | sed 's/ns/\ ns/g' >> README.md
	echo '' >> README.md
	echo 'Teams' >> README.md
	awk -f convert.awk bench-data.log | grep Teams | cut -d '/' -f2 | sort -nk5 | awk '{printf "%-24s%s %s %s \n", $1, $2, $3, $4 }'| sed 's/us/\ us/g' | sed 's/ms/\ ms/g' | sed 's/ns/\ ns/g' >> README.md
	echo '```' >> README.md

	cat >> README.md << EOL

	## Running the benchmarks

		just bench

	## For extracting benchmarks to file
		just log filename
	## To sort benchmarks (Note does not take units into consideration)
		just bigtable
		just teams
	[Just](https://github.com/casey/just) must be installed to use the just commands.

	EOL
	echo 'Plots will be rendered if `gnuplot` is installed and will be available in the `target/criterion` folder.' >> README.md
